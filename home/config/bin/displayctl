#!/bin/sh

set -eu

SCRIPTNAME=$(basename $0)
SCRIPTPATH=$(readlink -f $0)
SCRIPTDIR=$(dirname $SCRIPTPATH)
SCRIPTOWNER=$(stat -c '%U' $SCRIPTPATH)

XUSER=$(ps -C Xorg -C X -ouser=)
[ "$XUSER" = root ] && XUSER=$SCRIPTOWNER
[ "$(id -un)" = root ] && [ "$XUSER" != root ] && exec su -c "$0 $*" "$XUSER"
XUSERID=$(id -u $XUSER)

export DISPLAY=":0"
export XAUTHORITY=$HOME/.Xauthority
export DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$XUSERID/bus"
export PULSE_RUNTIME_PATH="/run/user/${XUSERID}/pulse/"

CONFIG=/home/$XUSER/.config/$SCRIPTNAME

LOCKFILE=/tmp/${SCRIPTNAME}.lock
exec 200>$LOCKFILE
flock -n 200 || { (>&2 echo "$SCRIPTNAME already running (locked)"); exit 1; }

main () {
    CMDBASE="xrandr -d $DISPLAY"
    XRANDRV="$(${CMDBASE} --verbose)"
    INTERNAL_OUTPUT="eDP-1"
    INTERNAL_OUTPUT_MODE="$(echo "$XRANDRV" | get_default_mode $INTERNAL_OUTPUT $INTERNAL_OUTPUT)"
    ALL_OUTPUTS="$(echo $(echo "$XRANDRV" | awk '/.*connected/ {print $1}'))"
    CONNECTED_OUTPUTS="$(echo $(echo "$XRANDRV" | awk '/ connected/ {print $1}') | sed 's/ \+/|/g')"
    DISCONNECTED_OUTPUTS="$(echo $(echo "$XRANDRV" | awk '/disconnected/ {print $1}') | sed 's/ \+/|/g')"
    CONNECTED_ACTIVE_OUTPUTS="$(echo $(echo "$XRANDRV" | awk '/ connected.*[[:digit:]]/ {print $1}') | sed 's/ \+/|/g')"
    DISCONNECTED_ACTIVE_OUTPUTS="$(echo $(echo "$XRANDRV" | awk '/disconnected.*[[:digit:]]/ {print $1}') | sed 's/ \+/|/g')"

    case ${1:-auto} in
        menu)   menu ;;
        in*)    internal ;;
        ex*)    external ;;
        span)   span     ;;
        mirror) mirror   ;;
        toggle) toggle   ;;
        auto)   auto     ;;
        backlight|back|bl|bright) backlight ${2:-} ;;
        fing*)  report_fingerprint ;;
        *)      usage ;;
    esac
}


menu () {
    items="auto internal external span mirror"
    result=$((for item in $items; do echo $item; done) | launcher "Display Mode")
    case ${result:-} in
        in*)    internal ;;
        ex*)    external ;;
        span)   span     ;;
        mirror) mirror   ;;
        auto)   auto     ;;
        *)      :        ;;
    esac
}

usage () {
    (>&2 echo "
    Usage:

    $SCRIPTNAME [mode]
    $SCRIPTNAME [backlight up|down]
    $SCRIPTNAME [fingerprint]

    where [mode] is one of:
    internal
    external
    span
    mirror
    auto
    ")
}

log_notify () {
    # TODO: restore logger "$SCRIPTNAME ${*:-}"
    notify-send -u low "$SCRIPTNAME ${*:-}"
}

execute () {
    mode="${1:-}"

    eval $CMD

    # echo "cmd $mode $CMD"

    case $mode in
        span*)  sleep 3 ;;
        ex*)    sleep 3 ;;
        mirror) sleep 4 ;;
    esac

    # get xscreensaver status and eat any error with a null function
    # (otherwise script errors out)
    xsaver_status="$(xscreensaver-command -time 2>&1)" || :

    # if not locked, restart xmonad, largely to deal with xmobar & tray pos,
    # otherwise send an Esc key event to "awaken" the screensaver on external
    # screens (for some reason xscreensaver will stay dark in some savers when
    # just switching displays unless a key event occurs)

#TODO: testing with this off to see if my current xmobar and xmonad config
# handles screen resizing (appears to)
#    [ "${xsaver_status#* locked}" = "$xsaver_status" ] \
#    && xmonad --restart || xdotool key Escape

# TEST: changing to just hitting "escape" on the screensaver
    [ "${xsaver_status#* locked}" = "$xsaver_status" ] || xdotool key Escape

    # reset wallpaper
    # feh --bg-fill /home/ethan/tmp/lowpoly6.jpg

    # remember what our preferred config is for this output combination
    save_fingerprint ${mode:-}

    # TODO: the restart of dunst is probably messing with our flock on the
    # lockfile (see above note)
    #notifications init

    # journal and notification
    log_notify "${mode:-} ${LOGIC:-}"
}

save_fingerprint () {
    fingerprint="$(generate_fingerprint)"
    if [ -f "$CONFIG" ]
    then
        CONFIG_VALUES="$(grep -v $fingerprint $CONFIG)"
        echo "${CONFIG_VALUES:-}" > "$CONFIG"
    fi
    echo "${fingerprint}=${1:-}" >> "$CONFIG"
}

generate_fingerprint () {
    EDID_FINGERPRINT="$(echo "$XRANDRV" | get_edids)"
    echo FINGERPRINT_$(echo $EDID_FINGERPRINT | sha1sum - | cut -d " " -f 1)
}

report_fingerprint () {
    fingerprint=$(generate_fingerprint)
    if [ -f $CONFIG ]
    then
        . $CONFIG
        eval "fingerprint_mode=\"\${${fingerprint}:-}\""
    fi
    echo "Using config file: $CONFIG"
    echo "Fingerprint for currently connected displays is: ${fingerprint##FINGERPRINT_}"
    echo "Saved mode for this fingerprint is: ${fingerprint_mode:-unset}"
}

get_edids () {
    while read line
    do
        if [ "${line#*EDID:}" != "$line" ]
        then
            EDID=true
            while $EDID
            do
                read edidline
                if [ "${edidline#*:}" = "$edidline" ]
                then
                    export FINGERPRINT="${FINGERPRINT:-}$edidline"
                else
                    EDID=false
                fi
            done
        fi
    done
    echo "$FINGERPRINT"
}

get_default_mode () {
    output=${1:?"Error: output parameter is required"}
    mode=""
    while read line
    do
        if [ "${line#*$output }" != "$line" ]
        then
            echo "${line#*$output}"
            reading_modes=true
            while $reading_modes
            do
                read modeval
                if [ "${modeval#*+}" != "$modeval" ]
                then
                    mode="$(echo -n ${modeval} | cut -d ' ' -f 1)"
                    reading_modes=false
                fi
            done
        fi
    done
    echo "$mode"
}

toggle () {
    LOGIC=toggle
    log_notify $FUNCNAME
    if [ "$CONNECTED_ACTIVE_OUTPUTS" = "$INTERNAL_OUTPUT" ] \
    && [ "$CONNECTED_OUTPUTS" != "$INTERNAL_OUTPUT" ]
    then
        external
    else
        internal
    fi
}

auto () {
    LOGIC=auto
    if [ "$CONNECTED_OUTPUTS" = "$INTERNAL_OUTPUT" ]
    then
        internal
    else
        if [ -f $CONFIG ]
        then
            fingerprint=$(generate_fingerprint)
            . $CONFIG
            eval "fingerprint_mode=\"\${${fingerprint}:-}\""
        fi
        case ${fingerprint_mode:-} in
            internal|external|span|spanex|mirror) $fingerprint_mode ;;
            *) span ;;
        esac
    fi
}

internal () {
    if [ -z "$DISCONNECTED_ACTIVE_OUTPUTS" ] \
    && [ "$CONNECTED_ACTIVE_OUTPUTS" = "$INTERNAL_OUTPUT" ]
    then
        log_notify "Internal display already active"
        return
    fi
    CMD="$CMDBASE"
    for OUTPUT in $ALL_OUTPUTS
    do
    case $OUTPUT in
        $INTERNAL_OUTPUT) CMD="$CMD --output $OUTPUT --primary --auto" ;;
        *) CMD="$CMD --output $OUTPUT --off" ;;
    esac
    done
    execute $FUNCNAME
}

external () {
    [ "$CONNECTED_OUTPUTS" = "$INTERNAL_OUTPUT" ] \
    && { log_notify "$SCRIPTNAME: no external displays connected"; exit; }
    CMD="$CMDBASE"
    for OUTPUT in $ALL_OUTPUTS
    do
        eval '
        case $OUTPUT in
            $INTERNAL_OUTPUT) CMD="$CMD --output $OUTPUT --off" ;;
	        '$CONNECTED_OUTPUTS') CMD="$CMD --output $OUTPUT --primary --auto" ;;
	     *) CMD="$CMD --output $OUTPUT --off" ;;
        esac'
    done
    execute $FUNCNAME
}

span () {
    CMD="$CMDBASE --output $INTERNAL_OUTPUT --scale 1x1 --primary --mode $INTERNAL_OUTPUT_MODE --pos 0x0"
    NEIGHBOR=$INTERNAL_OUTPUT

    for OUTPUT in $ALL_OUTPUTS
    do
        echo "OUTPUT $OUTPUT"
        echo "$XRANDRV" | get_default_mode $OUTPUT
        #OUTPUT_MODE="$(echo "$XRANDRV" | get_default_mode $OUTPUT)"

        #height=$(echo "$OUTPUT_MODE" | awk -F'x' '{ print $2 }' 2>/dev/null)
        #height=$(echo "$height*1.5" | bc 2>/dev/null)
        #height=$(echo "$height" | awk -F'.' '{ print $1 }')

        #if [ ! -z "$height" ]; then
        #    eval '
        #    case $OUTPUT in
        #        '$CONNECTED_OUTPUTS') CMD="$CMD --output $OUTPUT --scale 1.5x1.5 --mode $OUTPUT_MODE --pos 0x-$height"; NEIGHBOR=$OUTPUT ;;
        #        *) : ;;
        #    esac'
        #fi
    done



    log_notify "Switch to spanned displays"
    execute "$FUNCNAME"
    }

spanex () {
    CMD="$CMDBASE --output $INTERNAL_OUTPUT --off"
    NEIGHBOR=$INTERNAL_OUTPUT
    PRIMARY_SET=false
    for OUTPUT in $ALL_OUTPUTS
    do
        if ! $PRIMARY_SET
        then
            eval '
            case $OUTPUT in
                $INTERNAL_OUTPUT) : ;;
                '$CONNECTED_OUTPUTS') PRIMARY_SET=true; CMD="$CMD --output $OUTPUT --scale 1x1 --auto --primary"; NEIGHBOR=$OUTPUT ;;
                *) : ;;
            esac'
        else
            eval '
            case $OUTPUT in
                $INTERNAL_OUTPUT) : ;;
                '$CONNECTED_OUTPUTS') CMD="$CMD --output $OUTPUT --scale 1x1 --auto --right-of $NEIGHBOR"; NEIGHBOR=$OUTPUT ;;
                *) : ;;
            esac'
        fi
    done

    log_notify "Switch to spanned displays"
    echo "CMD is $CMD"
    execute "$FUNCNAME"
    }

oldspan () {
    CMD="$CMDBASE --output $INTERNAL_OUTPUT --scale 1x1 --primary --mode $INTERNAL_OUTPUT_MODE --pos 0x0"
    NEIGHBOR=$INTERNAL_OUTPUT
    OFFSET="$(echo $INTERNAL_OUTPUT_MODE | cut -d 'x' -f 1)"
    for OUTPUT in $ALL_OUTPUTS
    do
        eval '
        case $OUTPUT in
            $INTERNAL_OUTPUT) : ;;
            '$CONNECTED_OUTPUTS') CMD="$CMD --output $OUTPUT --scale 1x1 --auto --pos '$OFFSET'x0" ;;
            *) : ;;
        esac'
    done
    log_notify "Switch to spanned displays"
    execute "$FUNCNAME"
    }

mirror () {
    CMD="$CMDBASE"
    for OUTPUT in $ALL_OUTPUTS
    do
        eval '
        case $OUTPUT in
            $INTERNAL_OUTPUT) CMD="$CMD --output $OUTPUT --primary --mode $INTERNAL_OUTPUT_MODE --pos 0x0 --rotate normal --panning 0x0" ;;
            '$CONNECTED_OUTPUTS') CMD="$CMD --output $OUTPUT --mode $INTERNAL_OUTPUT_MODE --same-as $INTERNAL_OUTPUT" ;;
            *) CMD="$CMD --output $OUTPUT --off" ;;
        esac'
    done
    log_notify "Switch to external mirror of internal display"
    execute "$FUNCNAME"
    }

backlight () {
    case ${1:-} in
        u*|i*|+)    xbacklight + 20     ;;
        d*|-)       xbacklight - 20     ;;
        batt)       xbacklight = 40     ;;
        ac)         xbacklight = 100    ;;
        *)          xbacklight = 100    ;;
    esac

}

main $*

# vim: ft=sh:expandtab:ts=4:shiftwidth=4
