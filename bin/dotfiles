#!/bin/bash

set -e

# colors
NC='\033[0m'
OVERWRITE='\e[1A\e[K'
GREEN='\033[00;32m'
CYAN='\033[00;36m'
SEA="\\033[38;5;49m"
BLUE='\033[00;34m'
LBLACK='\033[01;30m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'

# emojis
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
ARROW="${SEA}\xE2\x96\xB6${NC}"

# paths
SSH_DIR="$HOME/.ssh"
CONFIG_DIR="$HOME/.config/dotfiles"
DOTFILES_DIR="$HOME/.dotfiles"
DOTFILES_LOG="$HOME/.dotfiles/dotfiles.log"
IS_FIRST_RUN="$HOME/.dotfiles/first_run"

# functions
function _task {
    if [[ $TASK != "" ]]; then
        printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
    fi
    TASK=$1
    printf "${LBLACK} [ ]  ${TASK} \n${LRED}"
}

function _clear_task {
    TASK=""
}

function _task_done {
    printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
    _clear_task
}

function _cmd {
    if ! [[ -f $DOTFILES_LOG ]]; then
        touch $DOTFILES_LOG
    fi
    > $DOTFILES_LOG
    if eval "$1" 1> /dev/null 2> $DOTFILES_LOG; then
        return 0
    fi
    printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
    while read line; do
        printf "      ${line}\n"
    done < $DOTFILES_LOG
    printf "\n"
    rm $DOTFILES_LOG
    exit 1
}

function arch_setup {
    if ! [ -x "$(command -v ansible)" ]; then
        _task "Installing Ansible"
        _cmd "sudo pacman -Sy --noconfirm"
        _cmd "sudo pacman -S --noconfirm ansible"
        _cmd "sudo pacman -S --noconfirm python-argcomplete"
    fi

    if ! pacman -Q python3 >/dev/null 2>&1; then
        _task "Installing Python3"
        _cmd "sudo pacman -S --noconfirm python3"
    fi

    if ! pacman -Q python-pip >/dev/null 2>&1; then
        _task "Installing Python3 Pip"
        _cmd "sudo pacman -S --noconfirm python-pip"
    fi

    if ! pip3 list | grep watchdog >/dev/null 2>&1; then
        _task "Installing Python3 Watchdog"
        _cmd "sudo pacman -S --noconfirm python-watchdog"
    fi

    if ! pacman -Q openssh >/dev/null 2>&1; then
        _task "Installing OpenSSH"
        _cmd "sudo pacman -S --noconfirm openssh"
    fi

    _task "Setting Locale"
    _cmd "sudo localectl set-locale LANG=fr_FR.UTF-8"
}

# main
if [[ "$UID" -eq 0 ]]; then
    _task "Must not be run as root"
    printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
    exit 1
fi

printf "${BLUE}"
sudo -v --prompt "[sudo] Please enter your password : "

mkdir -p "$DOTFILES_DIR"

source /etc/os-release
_task "Loading Setup for detected OS: $ID"
case $ID in
    arch)
        arch_setup
        ;;
    *)
        _task "Unsupported OS"
        _cmd "false"
        ;;
esac

if ! [[ -f "$SSH_DIR/authorized_keys" ]]; then
  _task "Generating SSH keys"
  _cmd "mkdir -p $SSH_DIR"
  _cmd "chmod 700 $SSH_DIR"
  _cmd "ssh-keygen -b 4096 -t rsa -f $SSH_DIR/id_rsa_dotfiles -N '' -C $USER@$HOSTNAME"
  _cmd "cat $SSH_DIR/id_rsa_dotfiles.pub >> $SSH_DIR/authorized_keys"
fi

pushd "$DOTFILES_DIR" 2>&1 > /dev/null

if ! [[ -d "$DOTFILES_DIR/.git" ]]; then
  _task "Cloning repository"
  _cmd "git init --quiet"
  _cmd "git remote add origin https://github.com/theo-coder/dotfiles.git"
  _cmd "git pull origin main --quiet"
  _cmd "git branch --set-upstream-to=origin/main main --quiet"
else
  _task "Updating repository"
  _cmd "git pull --quiet"
fi

sudo -v
_task "Updating Ansible Galaxy"
_cmd "ansible-galaxy install -r $DOTFILES_DIR/requirements.yml"

_task "Running playbook"; _task_done
ansible-playbook "$DOTFILES_DIR/main.yml" "$@"

popd 2>&1 > /dev/null

if ! [[ -f "$IS_FIRST_RUN" ]]; then
    echo -e "${CHECK_MARK} ${GREEN}First run complete!${NC}"
    echo -e "${ARROW} ${CYAN}Please reboot your computer to complete the setup.${NC}"
    touch "$IS_FIRST_RUN"
fi
